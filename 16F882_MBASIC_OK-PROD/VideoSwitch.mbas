' VideoSwitch FW for PIC 16F882 written in MikroBASIC by Jacksoft
' Copyright (c) 2017-2018 by Jacksoft Labs
' This project is distributed under the Creative Commons - Attribution - ShareAlike 3.0 license

PROGRAM VideoSwitch

' Set LCD Parameters
DIM LCD_RS as sbit at RC0_bit
    LCD_EN as sbit at RC1_bit
    LCD_D4 as sbit at RC2_bit
    LCD_D5 as sbit at RC3_bit
    LCD_D6 as sbit at RC4_bit
    LCD_D7 as sbit at RC5_bit

    LCD_RS_Direction as sbit at TRISC0_bit
    LCD_EN_Direction as sbit at TRISC1_bit
    LCD_D4_Direction as sbit at TRISC2_bit
    LCD_D5_Direction as sbit at TRISC3_bit
    LCD_D6_Direction as sbit at TRISC4_bit
    LCD_D7_Direction as sbit at TRISC5_bit

DIM Line1 as char[8]
    Line2 as char[8]

' Global vars declaration
DIM MaxSwitches as byte
    VideoPort as byte
    VideoPortOld as byte
    VideoPortStr as char[3]
    VideoPortCount as byte
    LCDBackCycle as byte
    LCDBackCycleMax as byte
    PortsBits as string[3]

' Function to drive Mux-Selector in binary
SUB FUNCTION DecToBin(dim decin as byte) as string[3]
    DIM tmpport AS STRING[3]
    SELECT CASE decin
      CASE 1
         tmpport = "000"
      CASE 2
         tmpport = "001"
      CASE 3
         tmpport = "010"
      CASE 4
         tmpport = "011"
      CASE 5
         tmpport = "100"
      CASE 6
         tmpport = "101"
      CASE 7
         tmpport = "110"
      CASE 8
         tmpport = "111"
    END SELECT
    result = tmpport
END SUB

MAIN:
    ' Turn off ADC and Comporator
    ADCON0 = 0
    ADCON1 = 0
    ANSEL = 0
    ANSELH = 0
    CCP1CON = 0
    CCP2CON = 0

    ' Ports configuration
    ' TRIS: 0 = Output; 1 = Input (to Hex)
    ' PORT: 0 = Off; 1 = On (to Hex)
    ' In binary is R#7 <- R#0
    TRISA = 0xC0                   ' 1100 0000
    PORTA = 0x38                   ' 0011 1000
    TRISB = 0x07                   ' 0000 0111
    PORTB = 0x00                   ' 0000 0000
    TRISC = 0x00                   ' 0000 0000
    PORTC = 0x7F                   ' 0111 1111

    ' Boot text, yeah B)
    Line1 = "JACKSOFT"
    Line2 = "  LABS  "

    Lcd_Init()                     ' Initialize LCD (I'm using an 8x2)
    Lcd_Cmd(_LCD_CLEAR)            ' Clear Screen
    Lcd_Cmd(_LCD_CURSOR_OFF)       ' Cursor Off (_)
    Lcd_Out(1,1,Line1)             ' Send the first row to the display
    Lcd_Out(2,1,Line2)             ' Send the second row to the display

    PORTC.6 = 1                    ' Power-on the backlight

    Delay_ms(50)
    ' Read how many daughterboard are connected and set MaxSwitches
    MaxSwitches = 8
    IF ((PORTB.1 = 1) AND (PORTB.2 = 0)) THEN
        MaxSwitches = 16
    END IF
    IF ((PORTB.1 = 1) AND (PORTB.2 = 1)) THEN
        MaxSwitches = 24
    END IF

    ' Read the saved input in EEPROM and eventually fix if something wrong
    IF (EEProm_Read(0x00) = 0xFF) THEN
        Delay_ms(50)
        EEProm_Write(0x00, 1)
    END IF
    Delay_ms(50)
    IF (EEProm_Read(0x00) <= MaxSwitches) THEN
        VideoPort = EEProm_Read(0x00)
    ELSE
        VideoPort = 1
        Delay_ms(50)
        EEProm_Write(0x00, VideoPort)
    END IF

    ' LCD Backlight timer
    LCDBackCycle = 0
    LCDBackCycleMax = 20           ' *100ms

    Delay_ms(1000)
    Lcd_Cmd(_LCD_CLEAR)
    
    Line1 = " VIDEO  "
    Line2 = " SWITCH "
    Lcd_Out(1,1,Line1)
    Lcd_Out(2,1,Line2)

    WHILE (TRUE)
        ' Button pressed events
        IF Button(PORTA,6,1,1) THEN
            IF (VideoPort < MaxSwitches) THEN
                Inc(VideoPort)
                EEProm_Write(0x00, VideoPort)
            END IF
            LCDBackCycle = 0
            PORTC.6 = 1
            Delay_ms(300)
        END IF
        IF Button(PORTA,7,1,1) THEN
            IF (VideoPort > 1) THEN
                Dec(VideoPort)
                EEProm_Write(0x00, VideoPort)
            END IF
            LCDBackCycle = 0
            PORTC.6 = 1
            Delay_ms(300)
        END IF
        
        ' Input and mux switch stuff
        IF (VideoPort <> VideoPortOld) THEN
            VideoPortOld = VideoPort
            ByteToStr(VideoPort, VideoPortStr)
            Line2 = "INPUT" + VideoPortStr
            Lcd_Out(2,1,Line2)
            
            IF (VideoPort <= 8) THEN
                VideoPortCount = VideoPort
                PORTA.3 = 0
                PORTA.4 = 1
                PORTA.5 = 1
            END IF
            IF (VideoPort >= 9) THEN
                VideoPortCount = VideoPort - 8
                PORTA.3 = 1
                PORTA.4 = 0
                PORTA.5 = 1
            END IF
            IF (VideoPort >= 17) THEN
                VideoPortCount = VideoPort - 16
                PORTA.3 = 1
                PORTA.4 = 1
                PORTA.5 = 0
            END IF

            PortsBits = DecToBin(VideoPortCount)
            Delay_ms(20)
            PORTA.0 = PortsBits[0]
            PORTA.1 = PortsBits[1]
            PORTA.2 = PortsBits[2]
        END IF

        ' LCD Backlight cycle
        IF (LCDBackCycle >= LCDBackCycleMax) THEN
            PORTC.6 = 0
        ELSE
            Inc(LCDBackCycle)
        END IF
        Delay_ms(100)
    WEND
END.